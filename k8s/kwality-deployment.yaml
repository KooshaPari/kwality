apiVersion: v1
kind: Namespace
metadata:
  name: kwality
  labels:
    name: kwality
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kwality-config
  namespace: kwality
data:
  KWALITY_ENV: "production"
  DB_HOST: "postgres-service"
  DB_PORT: "5432"
  DB_DATABASE: "kwality"
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  RUNTIME_MEMORY_LIMIT_MB: "512"
  RUNTIME_CPU_LIMIT_CORES: "1.0"
  RUNTIME_TIMEOUT_SECONDS: "300"
  SECURITY_SECRETS_DETECTION: "true"
---
apiVersion: v1
kind: Secret
metadata:
  name: kwality-secrets
  namespace: kwality
type: Opaque
data:
  # Base64 encoded values - update these with actual values
  DB_PASSWORD: cG9zdGdyZXNfc2VjdXJlX3Bhc3N3b3Jk  # postgres_secure_password
  REDIS_PASSWORD: cmVkaXNfc2VjdXJlX3Bhc3N3b3Jk       # redis_secure_password
  JWT_SECRET: anlfd3Rfc2VjdXJlX2tleQ==             # jwt_secure_key
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kwality-orchestrator
  namespace: kwality
  labels:
    app: kwality-orchestrator
spec:
  replicas: 3
  selector:
    matchLabels:
      app: kwality-orchestrator
  template:
    metadata:
      labels:
        app: kwality-orchestrator
    spec:
      containers:
      - name: orchestrator
        image: kwality/orchestrator:latest
        ports:
        - containerPort: 8080
        env:
        - name: KWALITY_PORT
          value: "8080"
        envFrom:
        - configMapRef:
            name: kwality-config
        - secretRef:
            name: kwality-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 5
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kwality-runtime-validator
  namespace: kwality
  labels:
    app: kwality-runtime-validator
spec:
  replicas: 5
  selector:
    matchLabels:
      app: kwality-runtime-validator
  template:
    metadata:
      labels:
        app: kwality-runtime-validator
    spec:
      containers:
      - name: runtime-validator
        image: kwality/runtime-validator:latest
        env:
        - name: RUST_LOG
          value: "info"
        - name: CONTAINER_RUNTIME
          value: "docker"
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        securityContext:
          privileged: true  # Required for container execution
        volumeMounts:
        - name: docker-sock
          mountPath: /var/run/docker.sock
        - name: tmp-volume
          mountPath: /tmp
      volumes:
      - name: docker-sock
        hostPath:
          path: /var/run/docker.sock
      - name: tmp-volume
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: kwality
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: kwality-config
              key: DB_DATABASE
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kwality-secrets
              key: DB_PASSWORD
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: kwality
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "128Mi"
            cpu: "125m"
          limits:
            memory: "256Mi"
            cpu: "250m"
        volumeMounts:
        - name: redis-storage
          mountPath: /data
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: kwality-orchestrator-service
  namespace: kwality
spec:
  selector:
    app: kwality-orchestrator
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: kwality-runtime-validator-service
  namespace: kwality
spec:
  selector:
    app: kwality-runtime-validator
  ports:
  - protocol: TCP
    port: 9090
    targetPort: 9090
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: kwality
spec:
  selector:
    app: postgres
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: kwality
spec:
  selector:
    app: redis
  ports:
  - protocol: TCP
    port: 6379
    targetPort: 6379
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: kwality
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: kwality
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kwality-ingress
  namespace: kwality
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: kwality.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: kwality-orchestrator-service
            port:
              number: 8080
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: kwality-orchestrator-hpa
  namespace: kwality
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: kwality-orchestrator
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: kwality-runtime-validator-hpa
  namespace: kwality
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: kwality-runtime-validator
  minReplicas: 5
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85