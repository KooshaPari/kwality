apiVersion: v1
kind: Namespace
metadata:
  name: kwality
  labels:
    name: kwality
---
apiVersion: v1
kind: Secret
metadata:
  name: kwality-secrets
  namespace: kwality
type: Opaque
data:
  # These should be generated and managed by external secret management
  # Example values provided - MUST BE CHANGED in production
  db-password: ""        # Set via external secret management
  redis-password: ""     # Set via external secret management  
  jwt-secret: ""         # Set via external secret management
  grafana-admin-password: "" # Set via external secret management
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kwality-config
  namespace: kwality
data:
  redis.conf: |
    bind 127.0.0.1
    protected-mode yes
    port 6379
    maxclients 1000
    tcp-keepalive 300
    timeout 300
    maxmemory 512mb
    maxmemory-policy allkeys-lru
    save 900 1
    save 300 10
    save 60 10000
  nginx.conf: |
    # Production NGINX config would go here
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kwality-orchestrator
  namespace: kwality
  labels:
    app: kwality-orchestrator
spec:
  replicas: 3
  selector:
    matchLabels:
      app: kwality-orchestrator
  template:
    metadata:
      labels:
        app: kwality-orchestrator
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: kwality-orchestrator
        image: kwality/orchestrator:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: KWALITY_PORT
          value: "8080"
        - name: KWALITY_ENV
          value: "production"
        - name: DB_HOST
          value: "postgres"
        - name: DB_PORT
          value: "5432"
        - name: DB_DATABASE
          value: "kwality"
        - name: DB_USERNAME
          value: "kwality"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kwality-secrets
              key: db-password
        - name: REDIS_HOST
          value: "redis"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kwality-secrets
              key: redis-password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: kwality-secrets
              key: jwt-secret
        - name: CORS_ORIGINS
          value: "https://kwality.yourdomain.com"
        - name: LOG_LEVEL
          value: "info"
        - name: LOG_FORMAT
          value: "json"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
        - name: config
          mountPath: /app/config
          readOnly: true
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
      - name: logs
        emptyDir:
          sizeLimit: 1Gi
      - name: config
        configMap:
          name: kwality-config
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kwality-runtime-validator
  namespace: kwality
  labels:
    app: kwality-runtime-validator
spec:
  replicas: 2
  selector:
    matchLabels:
      app: kwality-runtime-validator
  template:
    metadata:
      labels:
        app: kwality-runtime-validator
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: kwality-runtime-validator
        image: kwality/runtime-validator:latest
        imagePullPolicy: Always
        env:
        - name: RUST_LOG
          value: "info"
        - name: CONTAINER_RUNTIME
          value: "podman"  # Use podman instead of docker for security
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        volumeMounts:
        - name: workspace
          mountPath: /workspace
        - name: tmp
          mountPath: /tmp
        livenessProbe:
          exec:
            command:
            - runtime-validator
            - --health-check
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - runtime-validator
            - --health-check
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: workspace
        emptyDir:
          sizeLimit: 5Gi
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: kwality
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          value: "kwality"
        - name: POSTGRES_USER
          value: "kwality"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kwality-secrets
              key: db-password
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # PostgreSQL needs write access
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-init
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - kwality
            - -d
            - kwality
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - kwality
            - -d
            - kwality
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: postgres-init
        configMap:
          name: postgres-init
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: kwality
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kwality-secrets
              key: redis-password
        command:
        - redis-server
        - /etc/redis/redis.conf
        - --requirepass
        - $(REDIS_PASSWORD)
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis
          readOnly: true
        - name: tmp
          mountPath: /tmp
        livenessProbe:
          exec:
            command:
            - redis-cli
            - --no-auth-warning
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - --no-auth-warning
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc
      - name: redis-config
        configMap:
          name: kwality-config
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: kwality-orchestrator-service
  namespace: kwality
spec:
  selector:
    app: kwality-orchestrator
  ports:
  - port: 8080
    targetPort: 8080
    name: http
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: kwality
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: kwality
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: kwality
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: fast-ssd
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: kwality
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: fast-ssd
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: kwality-network-policy
  namespace: kwality
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: kwality
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: kwality
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: kwality-orchestrator-pdb
  namespace: kwality
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: kwality-orchestrator
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: kwality-orchestrator-hpa
  namespace: kwality
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: kwality-orchestrator
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80