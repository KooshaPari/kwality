# Enterprise Kwality Validation Configuration
# This example shows an advanced setup for enterprise environments with
# strict security, compliance, and performance requirements

validation:
  # Comprehensive validation with all engines
  enabled_engines:
    - static
    - runtime
    - security
    - integration
    - performance
    - compliance
  
  # Extended timeout for complex codebases
  timeout: "30m"
  
  # Parallel execution with worker scaling
  parallel: true
  max_workers: 10
  
  # Enterprise cleanup and auditing
  cleanup: true
  audit_logging: true
  
  # Validation pipeline stages
  stages:
    - name: "pre_validation"
      engines: ["static"]
      required: true
    - name: "security_scan"
      engines: ["security"]
      required: true
      quality_gate: true
    - name: "runtime_analysis"
      engines: ["runtime", "performance"]
      required: false
    - name: "compliance_check"
      engines: ["compliance"]
      required: true

# Advanced static analysis
static_analysis:
  # Enterprise-grade linters with custom rules
  linters:
    - golangci-lint
    - eslint
    - pylint
    - clippy
    - checkstyle
    - sonarqube        # Enterprise code quality
    - codeql           # Advanced security analysis
  
  # Custom rule sets
  custom_rules:
    - path: "/config/custom-rules/security.yml"
    - path: "/config/custom-rules/performance.yml"
    - path: "/config/custom-rules/architecture.yml"
  
  # Comprehensive limits for large codebases
  max_file_size: "50MB"
  max_files: 10000
  max_analysis_time: "20m"
  
  # Strict quality gates
  quality_gates:
    min_score: 85.0
    max_critical_issues: 0
    max_high_issues: 5
    max_medium_issues: 20
    max_complexity: 12
    min_test_coverage: 80.0
    max_duplication: 5.0

# Enhanced runtime validation
runtime_validation:
  # Multi-environment testing
  environments:
    - name: "linux_amd64"
      container_image: "kwality/runner-linux:latest"
      platform: "linux/amd64"
    - name: "linux_arm64"
      container_image: "kwality/runner-linux:latest"
      platform: "linux/arm64"
  
  # Resource limits for enterprise workloads
  timeout_seconds: 1800  # 30 minutes
  memory_limit_mb: 2048  # 2GB
  cpu_limit_cores: 4.0
  
  # Maximum security isolation
  network_isolation: true
  readonly_filesystem: true
  drop_capabilities: true
  no_new_privileges: true
  
  # Monitored temporary storage
  temp_dir_size_mb: 500
  disk_quota_mb: 1024
  
  # Enterprise environment configuration
  environment:
    NODE_ENV: "production"
    PYTHONPATH: "/workspace:/enterprise/libs"
    GOPATH: "/go"
    JAVA_OPTS: "-Xmx1g -XX:+UseG1GC"
    RUST_BACKTRACE: "1"
  
  # Advanced monitoring
  monitoring:
    enable_syscall_tracing: true
    enable_network_monitoring: true
    enable_file_access_logging: true
    resource_monitoring_interval: "1s"

# Comprehensive security scanning
security_scanning:
  # Enterprise security scanners
  scanners:
    - semgrep
    - gosec
    - bandit
    - cargo-audit
    - npm-audit
    - snyk             # Commercial vulnerability scanner
    - veracode         # Enterprise application security
    - checkmarx        # SAST enterprise solution
  
  # Multiple vulnerability databases
  vulnerability_dbs:
    - nvd
    - ghsa
    - osv
    - mitre-cve
    - snyk-db
    - enterprise-db    # Internal vulnerability database
  
  # Advanced secrets detection
  secrets_detection:
    enabled: true
    engines:
      - truffleHog
      - git-secrets
      - detect-secrets
    custom_patterns:
      - path: "/config/secret-patterns/enterprise.yml"
  
  # Strict security requirements
  min_severity: "low"
  fail_on_critical: true
  fail_on_secrets: true
  
  # Enterprise security gates
  security_gates:
    max_critical_issues: 0
    max_high_issues: 0
    max_medium_issues: 5
    max_low_issues: 20
    min_security_score: 90.0
    
  # Compliance requirements
  compliance_frameworks:
    - SOC2
    - ISO27001
    - PCI-DSS
    - HIPAA
    - GDPR

# Performance analysis for production readiness
performance_analysis:
  enabled: true
  
  # Comprehensive benchmarking
  benchmarks:
    cpu_intensive: true
    memory_allocation: true
    io_operations: true
    network_operations: true
    concurrent_load: true
    stress_testing: true
  
  # Production-ready thresholds
  thresholds:
    max_execution_time: "10s"
    max_memory_usage: "512MB"
    max_cpu_usage: "70%"
    max_startup_time: "5s"
    min_throughput: "1000 req/s"
    max_latency_p99: "100ms"
  
  # Load testing configuration
  load_testing:
    enabled: true
    concurrent_users: 100
    duration: "5m"
    ramp_up_time: "1m"

# Enterprise integration testing
integration_testing:
  enabled: true
  
  # Multiple test frameworks
  frameworks:
    - pytest
    - jest
    - go-test
    - cargo-test
    - junit
    - testng
  
  # Test categories
  test_categories:
    - unit
    - integration
    - contract
    - end_to_end
    - security
    - performance
  
  # Test execution configuration
  test_timeout: "20m"
  parallel_execution: true
  test_isolation: true
  
  # Coverage requirements
  coverage_requirements:
    min_line_coverage: 80.0
    min_branch_coverage: 70.0
    min_function_coverage: 90.0

# Compliance validation
compliance_validation:
  enabled: true
  
  # Regulatory frameworks
  frameworks:
    - SOC2:
        controls: ["CC6.1", "CC6.2", "CC6.3"]
        evidence_collection: true
    - ISO27001:
        controls: ["A.14.2.1", "A.14.2.5"]
        documentation_required: true
    - PCI-DSS:
        requirements: ["6.5.1", "6.5.8", "11.2"]
        security_testing: true
  
  # Custom compliance rules
  custom_rules:
    - name: "data_encryption"
      description: "Ensure sensitive data is encrypted"
      pattern: "encryption|crypto|cipher"
      required: true
    - name: "audit_logging"
      description: "Verify audit logging implementation"
      pattern: "log|audit|trace"
      required: true

# Enterprise reporting
reporting:
  # Multiple output formats
  formats:
    - json
    - xml
    - html
    - pdf
    - sarif           # Security findings format
    - sonarqube       # SonarQube import format
  
  # Detailed enterprise reporting
  detailed_findings: true
  include_remediation: true
  executive_summary: true
  compliance_report: true
  risk_assessment: true
  
  # Report templates
  templates:
    executive: "/config/templates/executive-report.html"
    technical: "/config/templates/technical-report.html"
    compliance: "/config/templates/compliance-report.html"
  
  # Report distribution
  distribution:
    - type: "email"
      recipients: ["ciso@company.com", "dev-leads@company.com"]
    - type: "s3"
      bucket: "validation-reports"
      prefix: "kwality-reports/"
    - type: "jira"
      project: "SEC"
      issue_type: "Security Finding"

# Enterprise notifications
notifications:
  enabled: true
  
  # Multiple notification channels
  channels:
    - type: "slack"
      webhook_url: "${SLACK_WEBHOOK_URL}"
      channel: "#security-alerts"
      template: "enterprise"
    - type: "teams"
      webhook_url: "${TEAMS_WEBHOOK_URL}"
      template: "security"
    - type: "pagerduty"
      api_key: "${PAGERDUTY_API_KEY}"
      service_key: "${PAGERDUTY_SERVICE_KEY}"
      severity_threshold: "high"
    - type: "email"
      smtp_server: "${SMTP_SERVER}"
      recipients:
        - "security-team@company.com"
        - "dev-team@company.com"
  
  # Notification triggers
  triggers:
    - event: "critical_security_finding"
      immediate: true
      channels: ["slack", "pagerduty", "email"]
    - event: "compliance_failure"
      immediate: true
      channels: ["teams", "email"]
    - event: "validation_complete"
      immediate: false
      channels: ["slack"]

# Enterprise monitoring and observability
monitoring:
  enabled: true
  
  # Metrics collection
  metrics:
    prometheus:
      enabled: true
      endpoint: "http://prometheus:9090"
    statsd:
      enabled: true
      endpoint: "statsd:8125"
  
  # Distributed tracing
  tracing:
    jaeger:
      enabled: true
      endpoint: "http://jaeger:14268"
    zipkin:
      enabled: false
  
  # Log aggregation
  logging:
    elasticsearch:
      enabled: true
      endpoint: "http://elasticsearch:9200"
      index: "kwality-logs"
    splunk:
      enabled: false
      endpoint: "${SPLUNK_ENDPOINT}"
      token: "${SPLUNK_TOKEN}"

# Enterprise authentication and authorization
authentication:
  enabled: true
  
  # SSO integration
  sso:
    provider: "okta"  # or "azure_ad", "aws_sso"
    client_id: "${SSO_CLIENT_ID}"
    client_secret: "${SSO_CLIENT_SECRET}"
    redirect_uri: "https://kwality.company.com/auth/callback"
  
  # Role-based access control
  rbac:
    enabled: true
    roles:
      - name: "admin"
        permissions: ["*"]
      - name: "security_analyst"
        permissions: ["view_reports", "run_security_scans"]
      - name: "developer"
        permissions: ["submit_validation", "view_own_reports"]
      - name: "auditor"
        permissions: ["view_compliance_reports", "export_audit_logs"]

# Data retention and archival
data_management:
  # Retention policies
  retention:
    validation_results: "2 years"
    audit_logs: "7 years"
    reports: "5 years"
    metrics: "1 year"
  
  # Data archival
  archival:
    enabled: true
    storage:
      type: "s3"
      bucket: "kwality-archive"
      encryption: "AES256"
    schedule: "monthly"
  
  # Data privacy
  privacy:
    anonymize_user_data: true
    encrypt_sensitive_data: true
    gdpr_compliance: true